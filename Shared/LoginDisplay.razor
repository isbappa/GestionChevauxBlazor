@using Microsoft.AspNetCore.Identity
@using GestionChevauxBlazor.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager


<AuthorizeView>
    <Authorized>
        @*<li class="nav-item" style="align-self: center;">
            @if (usermanager.getuserasync(user).result.profilepicture != null)
            {
                @<img style="width:40px;height:40px; object-fit:cover; border-radius:30px" src="data:image/*;base64,@(convert.tobase64string(usermanager.getuserasync(user).result.profilepicture))">
            }
        </li>*@

        @*<a href="Identity/Account/Manage">Hello, @context.User.Identity.Name!</a>*@


        @foreach (var user in ColUsers)
        {
            @if (user.Email == context.User.Identity.Name)
            {
                @if (user.ProfilePicture == null)
                {
                    <img style="width:40px;height:40px; object-fit:cover; border-radius:30px; align-self: center;" src="">
                    <a href="Identity/Account/Manage">Bonjour, @user.FirstName !  </a>
                }
                else
                {
                    <img style="width:40px;height:40px; object-fit:cover; border-radius:30px; align-self: center;" src="data:image/*;base64,@(Convert.ToBase64String(user.ProfilePicture))">
                    <a href="Identity/Account/Manage">Bonjour, @user.FirstName !  </a>
                }
            }
        }


        <form method="post" action="Identity/Account/LogOut">
            <button type="submit" class="nav-link btn btn-link">Se déconnecter</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Register">S'inscrire</a>
        <a href="Identity/Account/Login">S'identifier</a>
    </NotAuthorized>
</AuthorizeView>

@code {

    // Property used to add or edit the currently selected user
    ApplicationUser objUser = new ApplicationUser();


    // Collection to display the existing users
    List<ApplicationUser> ColUsers = new List<ApplicationUser>();


    protected override async Task OnInitializedAsync()
    {

        // Get the users
        GetUsers();
    }

    public void GetUsers()
    {

        // Collection to hold users
        ColUsers = new List<ApplicationUser>();

        // get users from _UserManager
        var user = UserManager.Users.Select(x => new ApplicationUser
        {
            Id = x.Id,
            LicenseNumber = x.LicenseNumber,
            PhoneNumber = x.PhoneNumber,
            UserName = x.UserName,
            FirstName = x.FirstName,
            LastName = x.LastName,
            Email = x.Email,
            PasswordHash = "*****",
            ProfilePicture = x.ProfilePicture,
            //Role = _RoleManager.FindByNameAsync(x.Id)
        });

        foreach (var item in user)
        {
            ColUsers.Add(item);
        }

    }
}
