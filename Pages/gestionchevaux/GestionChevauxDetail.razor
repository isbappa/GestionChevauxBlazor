
@attribute [Authorize(Roles = "SuperAdmin, Admin, Cavalier")]

@using GestionChevauxBlazor.Services;
@using GestionChevauxBlazor.Models;
@inject IAjoutChevauxService ajoutChevauxService
@inject IJSRuntime jsRuntime

@*<h5 class="modal-title">@CustomHeader</h5>*@

<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@TaskObject" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="taskName">Nom du cheval</label>
                        <input type="hidden" @bind-value="@TaskObject.IdCheval" />
                        <InputText id="nomCheval" class="form-control" @bind-Value="@TaskObject.HorseName" />
                    </div>

                    <div class="form-group">
                        <label for="taskName">Pays</label>
                        <InputText id="pays" class="form-control" @bind-Value="@TaskObject.Country" />
                    </div>

                    <div class="form-group">
                        <label for="taskName">Age</label>
                        <input type="number" min="0" id="age" class="form-control" @bind="@TaskObject.Age" />
                    </div>


                    <button type="submit" class="btn btn-primary">Valider</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public AjoutChevauxModel TaskObject { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }

    private async void HandleValidSubmit()
    {
        if (TaskObject.IdCheval == 0)
        {
            TaskObject.Available = true;
            await ajoutChevauxService.Add(TaskObject);
        }
        else
        {
            await ajoutChevauxService.Update(TaskObject);
        }
        await CloseTaskModal();
        DataChanged?.Invoke();
    }
}